// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: bussiness/service/v1/demo.proto

package pbs_demo

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// C2SHello Hello请求
type C2SHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text 用于描述一个文本
	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty" xorm:"varchar(255) unsigned not null default '' 'Text'"`
}

func (x *C2SHello) Reset() {
	*x = C2SHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2SHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SHello) ProtoMessage() {}

func (x *C2SHello) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SHello.ProtoReflect.Descriptor instead.
func (*C2SHello) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{0}
}

func (x *C2SHello) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// S2CHello Hello响应
type S2CHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=Reply,proto3" json:"Reply,omitempty" xorm:"varchar(255) unsigned not null default '' 'Reply'"`
}

func (x *S2CHello) Reset() {
	*x = S2CHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CHello) ProtoMessage() {}

func (x *S2CHello) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CHello.ProtoReflect.Descriptor instead.
func (*S2CHello) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{1}
}

func (x *S2CHello) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

// C2STimestamp 时间戳请求
type C2STimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2STimestamp) Reset() {
	*x = C2STimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2STimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2STimestamp) ProtoMessage() {}

func (x *C2STimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2STimestamp.ProtoReflect.Descriptor instead.
func (*C2STimestamp) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{2}
}

// S2CTimestamp 时间戳响应
type S2CTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateTime int64 `protobuf:"varint,1,opt,name=DateTime,proto3" json:"DateTime,omitempty" xorm:"bigint not null default 0 'DateTime'"`
}

func (x *S2CTimestamp) Reset() {
	*x = S2CTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CTimestamp) ProtoMessage() {}

func (x *S2CTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CTimestamp.ProtoReflect.Descriptor instead.
func (*S2CTimestamp) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{3}
}

func (x *S2CTimestamp) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

type C2SHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2SHeader) Reset() {
	*x = C2SHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2SHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SHeader) ProtoMessage() {}

func (x *C2SHeader) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SHeader.ProtoReflect.Descriptor instead.
func (*C2SHeader) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{4}
}

type S2CHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *S2CHeader) Reset() {
	*x = S2CHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CHeader) ProtoMessage() {}

func (x *S2CHeader) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CHeader.ProtoReflect.Descriptor instead.
func (*S2CHeader) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{5}
}

type C2SError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2SError) Reset() {
	*x = C2SError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2SError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SError) ProtoMessage() {}

func (x *C2SError) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SError.ProtoReflect.Descriptor instead.
func (*C2SError) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{6}
}

type S2CError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *S2CError) Reset() {
	*x = S2CError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CError) ProtoMessage() {}

func (x *S2CError) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CError.ProtoReflect.Descriptor instead.
func (*S2CError) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{7}
}

// C2SBody Body 响应
type S2CBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text 问候语
	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty" xorm:"varchar(255) unsigned not null default '' 'Text'"`
}

func (x *S2CBody) Reset() {
	*x = S2CBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CBody) ProtoMessage() {}

func (x *S2CBody) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CBody.ProtoReflect.Descriptor instead.
func (*S2CBody) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{8}
}

func (x *S2CBody) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// C2SBody body请求
type C2SBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ParamOne 参数1
	ParamOne string `protobuf:"bytes,1,opt,name=ParamOne,proto3" json:"ParamOne,omitempty" xorm:"varchar(255) unsigned not null default '' 'ParamOne'"`
	// Person 参数2
	ParamTwo string `protobuf:"bytes,2,opt,name=ParamTwo,proto3" json:"ParamTwo,omitempty" xorm:"varchar(255) unsigned not null default '' 'ParamTwo'"`
	// Person 参数3
	Person *People `protobuf:"bytes,3,opt,name=Person,proto3" json:"Person,omitempty" xorm:"text json 'Person'"`
}

func (x *C2SBody) Reset() {
	*x = C2SBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2SBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SBody) ProtoMessage() {}

func (x *C2SBody) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SBody.ProtoReflect.Descriptor instead.
func (*C2SBody) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{9}
}

func (x *C2SBody) GetParamOne() string {
	if x != nil {
		return x.ParamOne
	}
	return ""
}

func (x *C2SBody) GetParamTwo() string {
	if x != nil {
		return x.ParamTwo
	}
	return ""
}

func (x *C2SBody) GetPerson() *People {
	if x != nil {
		return x.Person
	}
	return nil
}

// People 用于描述一个人
type People struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NickName 昵称
	NickName string `protobuf:"bytes,1,opt,name=NickName,proto3" json:"NickName,omitempty" xorm:"varchar(255) unsigned not null default '' 'NickName'"`
	// Age 年龄
	Age int32 `protobuf:"varint,2,opt,name=Age,proto3" json:"Age,omitempty" xorm:"int not null default 0 'Age'"`
	// Address 地址
	Address int32 `protobuf:"varint,3,opt,name=Address,proto3" json:"Address,omitempty" xorm:"int not null default 0 'Address'"`
}

func (x *People) Reset() {
	*x = People{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *People) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*People) ProtoMessage() {}

func (x *People) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use People.ProtoReflect.Descriptor instead.
func (*People) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{10}
}

func (x *People) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *People) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *People) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

// C2SOneOf 流模式oneof模式
type C2SRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq  int64  `protobuf:"varint,1,opt,name=Seq,proto3" json:"Seq,omitempty" xorm:"bigint not null default 0 'Seq'"`
	Cmd  int64  `protobuf:"varint,2,opt,name=Cmd,proto3" json:"Cmd,omitempty" xorm:"bigint not null default 0 'Cmd'"`
	Text string `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty" xorm:"varchar(255) unsigned not null default '' 'Text'"`
}

func (x *C2SRouter) Reset() {
	*x = C2SRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2SRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SRouter) ProtoMessage() {}

func (x *C2SRouter) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SRouter.ProtoReflect.Descriptor instead.
func (*C2SRouter) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{11}
}

func (x *C2SRouter) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *C2SRouter) GetCmd() int64 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *C2SRouter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// S2COneOf 流模式oneof模式
type S2CRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// C2S中的request
	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty" xorm:"varchar(255) unsigned not null default '' 'Text'"`
}

func (x *S2CRouter) Reset() {
	*x = S2CRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bussiness_service_v1_demo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2CRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CRouter) ProtoMessage() {}

func (x *S2CRouter) ProtoReflect() protoreflect.Message {
	mi := &file_bussiness_service_v1_demo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CRouter.ProtoReflect.Descriptor instead.
func (*S2CRouter) Descriptor() ([]byte, []int) {
	return file_bussiness_service_v1_demo_proto_rawDescGZIP(), []int{12}
}

func (x *S2CRouter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_bussiness_service_v1_demo_proto protoreflect.FileDescriptor

var file_bussiness_service_v1_demo_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x08, 0x43, 0x32, 0x53, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x32, 0x43, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x32, 0x53, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2a, 0x0a, 0x0c, 0x53, 0x32, 0x43, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x43, 0x32, 0x53, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x0b, 0x0a, 0x09, 0x53, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x0a, 0x0a,
	0x08, 0x43, 0x32, 0x53, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x0a, 0x0a, 0x08, 0x53, 0x32, 0x43,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x07, 0x53, 0x32, 0x43, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x65, 0x78, 0x74, 0x22, 0x77, 0x0a, 0x07, 0x43, 0x32, 0x53, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x54, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x54, 0x77, 0x6f, 0x12, 0x34, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x50, 0x0a,
	0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x41, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x43, 0x0a, 0x09, 0x43, 0x32, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x53, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x53, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x43, 0x6d, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x65, 0x78, 0x74, 0x22, 0x1f, 0x0a, 0x09, 0x53, 0x32, 0x43, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x32, 0x9e, 0x06, 0x0a, 0x04, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x48,
	0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x42, 0x75, 0x73,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x43, 0x32, 0x53, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x1d, 0x2e, 0x42, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x32, 0x43, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5b, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x32, 0x53, 0x42,
	0x6f, 0x64, 0x79, 0x1a, 0x1d, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x32, 0x43, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1d, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x32, 0x53, 0x42, 0x6f, 0x64,
	0x79, 0x1a, 0x1d, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x32, 0x43, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x47, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1e, 0x2e, 0x42, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x43, 0x32, 0x53, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x1a, 0x1e, 0x2e, 0x42, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x32, 0x43, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x53, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x32,
	0x53, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x22, 0x2e, 0x42, 0x75, 0x73,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x53, 0x32, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4a,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x43, 0x32, 0x53, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x32, 0x43, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x32, 0x53, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x1e, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x32, 0x43, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x08, 0x53, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x32, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x1a, 0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x32, 0x43, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x08, 0x43, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x32, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x1a, 0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x32, 0x43, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x28, 0x01, 0x12, 0x51, 0x0a, 0x09, 0x42, 0x49, 0x44, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x32, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x1a, 0x1f, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x32, 0x43, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x28, 0x01, 0x30, 0x01, 0x42, 0x62, 0x5a, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x70, 0x62,
	0x2f, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x62, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x3b, 0x70,
	0x62, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0xf8, 0x01, 0x01, 0xaa, 0x02, 0x1d, 0x5a, 0x77, 0x77,
	0x78, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bussiness_service_v1_demo_proto_rawDescOnce sync.Once
	file_bussiness_service_v1_demo_proto_rawDescData = file_bussiness_service_v1_demo_proto_rawDesc
)

func file_bussiness_service_v1_demo_proto_rawDescGZIP() []byte {
	file_bussiness_service_v1_demo_proto_rawDescOnce.Do(func() {
		file_bussiness_service_v1_demo_proto_rawDescData = protoimpl.X.CompressGZIP(file_bussiness_service_v1_demo_proto_rawDescData)
	})
	return file_bussiness_service_v1_demo_proto_rawDescData
}

var file_bussiness_service_v1_demo_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_bussiness_service_v1_demo_proto_goTypes = []interface{}{
	(*C2SHello)(nil),     // 0: Bussiness.Service.V1.C2SHello
	(*S2CHello)(nil),     // 1: Bussiness.Service.V1.S2CHello
	(*C2STimestamp)(nil), // 2: Bussiness.Service.V1.C2STimestamp
	(*S2CTimestamp)(nil), // 3: Bussiness.Service.V1.S2CTimestamp
	(*C2SHeader)(nil),    // 4: Bussiness.Service.V1.C2SHeader
	(*S2CHeader)(nil),    // 5: Bussiness.Service.V1.S2CHeader
	(*C2SError)(nil),     // 6: Bussiness.Service.V1.C2SError
	(*S2CError)(nil),     // 7: Bussiness.Service.V1.S2CError
	(*S2CBody)(nil),      // 8: Bussiness.Service.V1.S2CBody
	(*C2SBody)(nil),      // 9: Bussiness.Service.V1.C2SBody
	(*People)(nil),       // 10: Bussiness.Service.V1.People
	(*C2SRouter)(nil),    // 11: Bussiness.Service.V1.C2SRouter
	(*S2CRouter)(nil),    // 12: Bussiness.Service.V1.S2CRouter
}
var file_bussiness_service_v1_demo_proto_depIdxs = []int32{
	10, // 0: Bussiness.Service.V1.C2SBody.Person:type_name -> Bussiness.Service.V1.People
	9,  // 1: Bussiness.Service.V1.Demo.BodyPost:input_type -> Bussiness.Service.V1.C2SBody
	9,  // 2: Bussiness.Service.V1.Demo.ParamGet:input_type -> Bussiness.Service.V1.C2SBody
	9,  // 3: Bussiness.Service.V1.Demo.ParamBody:input_type -> Bussiness.Service.V1.C2SBody
	0,  // 4: Bussiness.Service.V1.Demo.Hello:input_type -> Bussiness.Service.V1.C2SHello
	2,  // 5: Bussiness.Service.V1.Demo.Timestamp:input_type -> Bussiness.Service.V1.C2STimestamp
	4,  // 6: Bussiness.Service.V1.Demo.Header:input_type -> Bussiness.Service.V1.C2SHeader
	6,  // 7: Bussiness.Service.V1.Demo.Error:input_type -> Bussiness.Service.V1.C2SError
	11, // 8: Bussiness.Service.V1.Demo.SsStream:input_type -> Bussiness.Service.V1.C2SRouter
	11, // 9: Bussiness.Service.V1.Demo.CsStream:input_type -> Bussiness.Service.V1.C2SRouter
	11, // 10: Bussiness.Service.V1.Demo.BIDStream:input_type -> Bussiness.Service.V1.C2SRouter
	8,  // 11: Bussiness.Service.V1.Demo.BodyPost:output_type -> Bussiness.Service.V1.S2CBody
	8,  // 12: Bussiness.Service.V1.Demo.ParamGet:output_type -> Bussiness.Service.V1.S2CBody
	8,  // 13: Bussiness.Service.V1.Demo.ParamBody:output_type -> Bussiness.Service.V1.S2CBody
	1,  // 14: Bussiness.Service.V1.Demo.Hello:output_type -> Bussiness.Service.V1.S2CHello
	3,  // 15: Bussiness.Service.V1.Demo.Timestamp:output_type -> Bussiness.Service.V1.S2CTimestamp
	5,  // 16: Bussiness.Service.V1.Demo.Header:output_type -> Bussiness.Service.V1.S2CHeader
	7,  // 17: Bussiness.Service.V1.Demo.Error:output_type -> Bussiness.Service.V1.S2CError
	12, // 18: Bussiness.Service.V1.Demo.SsStream:output_type -> Bussiness.Service.V1.S2CRouter
	12, // 19: Bussiness.Service.V1.Demo.CsStream:output_type -> Bussiness.Service.V1.S2CRouter
	12, // 20: Bussiness.Service.V1.Demo.BIDStream:output_type -> Bussiness.Service.V1.S2CRouter
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_bussiness_service_v1_demo_proto_init() }
func file_bussiness_service_v1_demo_proto_init() {
	if File_bussiness_service_v1_demo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bussiness_service_v1_demo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2SHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2STimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2SHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2SError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2SBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*People); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2SRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bussiness_service_v1_demo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2CRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bussiness_service_v1_demo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bussiness_service_v1_demo_proto_goTypes,
		DependencyIndexes: file_bussiness_service_v1_demo_proto_depIdxs,
		MessageInfos:      file_bussiness_service_v1_demo_proto_msgTypes,
	}.Build()
	File_bussiness_service_v1_demo_proto = out.File
	file_bussiness_service_v1_demo_proto_rawDesc = nil
	file_bussiness_service_v1_demo_proto_goTypes = nil
	file_bussiness_service_v1_demo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoClient interface {
	// Body 数据体
	BodyPost(ctx context.Context, in *C2SBody, opts ...grpc.CallOption) (*S2CBody, error)
	// ParamGet 获取参数
	ParamGet(ctx context.Context, in *C2SBody, opts ...grpc.CallOption) (*S2CBody, error)
	// ParamBody
	ParamBody(ctx context.Context, in *C2SBody, opts ...grpc.CallOption) (*S2CBody, error)
	// Hello 问候 unray
	Hello(ctx context.Context, in *C2SHello, opts ...grpc.CallOption) (*S2CHello, error)
	// Timestamp 服务器时间戳
	Timestamp(ctx context.Context, in *C2STimestamp, opts ...grpc.CallOption) (*S2CTimestamp, error)
	// Header 测试头部
	Header(ctx context.Context, in *C2SHeader, opts ...grpc.CallOption) (*S2CHeader, error)
	// Error 测试错误
	Error(ctx context.Context, in *C2SError, opts ...grpc.CallOption) (*S2CError, error)
	// NotifyByOneOf 通过oneof路由的方式
	SsStream(ctx context.Context, in *C2SRouter, opts ...grpc.CallOption) (Demo_SsStreamClient, error)
	CsStream(ctx context.Context, opts ...grpc.CallOption) (Demo_CsStreamClient, error)
	// BIDStream 双向流
	BIDStream(ctx context.Context, opts ...grpc.CallOption) (Demo_BIDStreamClient, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) BodyPost(ctx context.Context, in *C2SBody, opts ...grpc.CallOption) (*S2CBody, error) {
	out := new(S2CBody)
	err := c.cc.Invoke(ctx, "/Bussiness.Service.V1.Demo/BodyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) ParamGet(ctx context.Context, in *C2SBody, opts ...grpc.CallOption) (*S2CBody, error) {
	out := new(S2CBody)
	err := c.cc.Invoke(ctx, "/Bussiness.Service.V1.Demo/ParamGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) ParamBody(ctx context.Context, in *C2SBody, opts ...grpc.CallOption) (*S2CBody, error) {
	out := new(S2CBody)
	err := c.cc.Invoke(ctx, "/Bussiness.Service.V1.Demo/ParamBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Hello(ctx context.Context, in *C2SHello, opts ...grpc.CallOption) (*S2CHello, error) {
	out := new(S2CHello)
	err := c.cc.Invoke(ctx, "/Bussiness.Service.V1.Demo/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Timestamp(ctx context.Context, in *C2STimestamp, opts ...grpc.CallOption) (*S2CTimestamp, error) {
	out := new(S2CTimestamp)
	err := c.cc.Invoke(ctx, "/Bussiness.Service.V1.Demo/Timestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Header(ctx context.Context, in *C2SHeader, opts ...grpc.CallOption) (*S2CHeader, error) {
	out := new(S2CHeader)
	err := c.cc.Invoke(ctx, "/Bussiness.Service.V1.Demo/Header", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Error(ctx context.Context, in *C2SError, opts ...grpc.CallOption) (*S2CError, error) {
	out := new(S2CError)
	err := c.cc.Invoke(ctx, "/Bussiness.Service.V1.Demo/Error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) SsStream(ctx context.Context, in *C2SRouter, opts ...grpc.CallOption) (Demo_SsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Demo_serviceDesc.Streams[0], "/Bussiness.Service.V1.Demo/SsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoSsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_SsStreamClient interface {
	Recv() (*S2CRouter, error)
	grpc.ClientStream
}

type demoSsStreamClient struct {
	grpc.ClientStream
}

func (x *demoSsStreamClient) Recv() (*S2CRouter, error) {
	m := new(S2CRouter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) CsStream(ctx context.Context, opts ...grpc.CallOption) (Demo_CsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Demo_serviceDesc.Streams[1], "/Bussiness.Service.V1.Demo/CsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoCsStreamClient{stream}
	return x, nil
}

type Demo_CsStreamClient interface {
	Send(*C2SRouter) error
	CloseAndRecv() (*S2CRouter, error)
	grpc.ClientStream
}

type demoCsStreamClient struct {
	grpc.ClientStream
}

func (x *demoCsStreamClient) Send(m *C2SRouter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoCsStreamClient) CloseAndRecv() (*S2CRouter, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(S2CRouter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) BIDStream(ctx context.Context, opts ...grpc.CallOption) (Demo_BIDStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Demo_serviceDesc.Streams[2], "/Bussiness.Service.V1.Demo/BIDStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBIDStreamClient{stream}
	return x, nil
}

type Demo_BIDStreamClient interface {
	Send(*C2SRouter) error
	Recv() (*S2CRouter, error)
	grpc.ClientStream
}

type demoBIDStreamClient struct {
	grpc.ClientStream
}

func (x *demoBIDStreamClient) Send(m *C2SRouter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoBIDStreamClient) Recv() (*S2CRouter, error) {
	m := new(S2CRouter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServer is the server API for Demo service.
type DemoServer interface {
	// Body 数据体
	BodyPost(context.Context, *C2SBody) (*S2CBody, error)
	// ParamGet 获取参数
	ParamGet(context.Context, *C2SBody) (*S2CBody, error)
	// ParamBody
	ParamBody(context.Context, *C2SBody) (*S2CBody, error)
	// Hello 问候 unray
	Hello(context.Context, *C2SHello) (*S2CHello, error)
	// Timestamp 服务器时间戳
	Timestamp(context.Context, *C2STimestamp) (*S2CTimestamp, error)
	// Header 测试头部
	Header(context.Context, *C2SHeader) (*S2CHeader, error)
	// Error 测试错误
	Error(context.Context, *C2SError) (*S2CError, error)
	// NotifyByOneOf 通过oneof路由的方式
	SsStream(*C2SRouter, Demo_SsStreamServer) error
	CsStream(Demo_CsStreamServer) error
	// BIDStream 双向流
	BIDStream(Demo_BIDStreamServer) error
}

// UnimplementedDemoServer can be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (*UnimplementedDemoServer) BodyPost(context.Context, *C2SBody) (*S2CBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BodyPost not implemented")
}
func (*UnimplementedDemoServer) ParamGet(context.Context, *C2SBody) (*S2CBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParamGet not implemented")
}
func (*UnimplementedDemoServer) ParamBody(context.Context, *C2SBody) (*S2CBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParamBody not implemented")
}
func (*UnimplementedDemoServer) Hello(context.Context, *C2SHello) (*S2CHello, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedDemoServer) Timestamp(context.Context, *C2STimestamp) (*S2CTimestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timestamp not implemented")
}
func (*UnimplementedDemoServer) Header(context.Context, *C2SHeader) (*S2CHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Header not implemented")
}
func (*UnimplementedDemoServer) Error(context.Context, *C2SError) (*S2CError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (*UnimplementedDemoServer) SsStream(*C2SRouter, Demo_SsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SsStream not implemented")
}
func (*UnimplementedDemoServer) CsStream(Demo_CsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CsStream not implemented")
}
func (*UnimplementedDemoServer) BIDStream(Demo_BIDStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BIDStream not implemented")
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_BodyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).BodyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bussiness.Service.V1.Demo/BodyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).BodyPost(ctx, req.(*C2SBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_ParamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).ParamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bussiness.Service.V1.Demo/ParamGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).ParamGet(ctx, req.(*C2SBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_ParamBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).ParamBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bussiness.Service.V1.Demo/ParamBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).ParamBody(ctx, req.(*C2SBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SHello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bussiness.Service.V1.Demo/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Hello(ctx, req.(*C2SHello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Timestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2STimestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Timestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bussiness.Service.V1.Demo/Timestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Timestamp(ctx, req.(*C2STimestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Header_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Header(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bussiness.Service.V1.Demo/Header",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Header(ctx, req.(*C2SHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bussiness.Service.V1.Demo/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Error(ctx, req.(*C2SError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_SsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(C2SRouter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).SsStream(m, &demoSsStreamServer{stream})
}

type Demo_SsStreamServer interface {
	Send(*S2CRouter) error
	grpc.ServerStream
}

type demoSsStreamServer struct {
	grpc.ServerStream
}

func (x *demoSsStreamServer) Send(m *S2CRouter) error {
	return x.ServerStream.SendMsg(m)
}

func _Demo_CsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).CsStream(&demoCsStreamServer{stream})
}

type Demo_CsStreamServer interface {
	SendAndClose(*S2CRouter) error
	Recv() (*C2SRouter, error)
	grpc.ServerStream
}

type demoCsStreamServer struct {
	grpc.ServerStream
}

func (x *demoCsStreamServer) SendAndClose(m *S2CRouter) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoCsStreamServer) Recv() (*C2SRouter, error) {
	m := new(C2SRouter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Demo_BIDStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).BIDStream(&demoBIDStreamServer{stream})
}

type Demo_BIDStreamServer interface {
	Send(*S2CRouter) error
	Recv() (*C2SRouter, error)
	grpc.ServerStream
}

type demoBIDStreamServer struct {
	grpc.ServerStream
}

func (x *demoBIDStreamServer) Send(m *S2CRouter) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoBIDStreamServer) Recv() (*C2SRouter, error) {
	m := new(C2SRouter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bussiness.Service.V1.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BodyPost",
			Handler:    _Demo_BodyPost_Handler,
		},
		{
			MethodName: "ParamGet",
			Handler:    _Demo_ParamGet_Handler,
		},
		{
			MethodName: "ParamBody",
			Handler:    _Demo_ParamBody_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _Demo_Hello_Handler,
		},
		{
			MethodName: "Timestamp",
			Handler:    _Demo_Timestamp_Handler,
		},
		{
			MethodName: "Header",
			Handler:    _Demo_Header_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _Demo_Error_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SsStream",
			Handler:       _Demo_SsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CsStream",
			Handler:       _Demo_CsStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BIDStream",
			Handler:       _Demo_BIDStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bussiness/service/v1/demo.proto",
}
